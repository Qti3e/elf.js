<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->
<html style="" class=" js no-touch csstransforms3d csstransitions"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<!-- Basic -->
<meta charset="utf-8">
<title>Assembly Logical Instructions</title>
<meta name="description" content="Assembly Logical Instructions - Learning assembly programming language in simple and easy steps using this beginner's tutorial containing basic to advanced knowledge starting from Environment Setup, Status Register, Arithmetic Instructions, Conditional Execution, Loop Instructions, Logical Instructions, String Processing, Recursion, Arrays, Procedures, Constants, Macros and File Management.">
<meta name="keywords" content="Assembly, Programming, Language, Tutorials, Learning, Beginners, Basics, Environment Setup, Status Register, Arithmetic Instructions, Conditional Execution, Loop Instructions, Logical Instructions, String Processing, Recursion, Arrays, Procedures, Constants, Macros, File Management.">
<!-- base href="https://www.tutorialspoint.com/" -->
<link rel="shortcut icon" href="https://www.tutorialspoint.com/favicon.ico" type="image/x-icon">
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US">
<meta property="og:type" content="website">
<meta property="fb:app_id" content="471319149685276">
<meta property="og:site_name" content="www.tutorialspoint.com">
<meta name="robots" content="index, follow">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script src="Assembly%20Logical%20Instructions_files/ca-pub-7133395778201029.js"></script><script type="text/javascript" src="Assembly%20Logical%20Instructions_files/script-min-v4.js"></script>
<link rel="stylesheet" href="Assembly%20Logical%20Instructions_files/style-min.css">
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
pre.prettyprint.tryit {min-height:37px; background: #eee url(assembly_programming/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #113b6a url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #113b6a !important;}
.submenu-item{ border-bottom: 2px solid #113b6a !important; border-top: 2px solid #113b6a !important }
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img src="Assembly%20Logical%20Instructions_files/loading-cg.gif" alt="" width="70" height="70">
   </div>
</div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="https://www.tutorialspoint.com/index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="Assembly%20Logical%20Instructions_files/logo.png">
      </a>
      </h1>			
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="https://www.tutorialspoint.com/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a href="http://www.sendfiles.net/"><i class="fa fa-send"></i> &nbsp;SENDfiles</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="Assembly%20Logical%20Instructions_files/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="https://www.tutorialspoint.com/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="https://www.tutorialspoint.com/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
         <!-- search code here  --> 
      <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 24px!important"> <i class="icon icon-bars"></i> </button>
   </div>
  
   <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="https://www.tutorialspoint.com/index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown" id="liTL"><a class="dropdown" href="javascript:void(0);"><span class="tut-lib"> Tutorials Library <i class="fa-caret-down"></i></span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://www.tutorialspoint.com/codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://www.tutorialspoint.com/tutor_connect/index.php"><i class="fa-user"> </i> Tutor Connect</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off" type="text">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
         <div class="submenu-item sub-main-menu" id="top-sub-menu"></div>
         
      </div>
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="Assembly%20Logical%20Instructions_files/assembly-mini-logo.jpg" alt="Assembly Programming Tutorial">
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">Assembly Tutorial</li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/index.htm">Assembly - Home</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_introduction.htm">Assembly - Introduction</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_environment_setup.htm">Assembly - Environment Setup</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_basic_syntax.htm">Assembly - Basic Syntax</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_memory_segments.htm">Assembly - Memory Segments</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm">Assembly - Registers</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_system_calls.htm">Assembly - System Calls</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_addressing_modes.htm">Assembly - Addressing Modes</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_variables.htm">Assembly - Variables</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_constants.htm">Assembly - Constants</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_arithmetic_instructions.htm">Assembly - Arithmetic Instructions</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm" style="background-color: rgb(214, 214, 214);">Assembly - Logical Instructions</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_conditions.htm">Assembly - Conditions</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_loops.htm">Assembly - Loops</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_numbers.htm">Assembly - Numbers</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_strings.htm">Assembly - Strings</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_arrays.htm">Assembly - Arrays</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_procedures.htm">Assembly - Procedures</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_recursion.htm">Assembly - Recursion</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_macros.htm">Assembly - Macros</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_file_management.htm">Assembly - File Management</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_memory_management.htm">Assembly - Memory Management</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Assembly Useful Resources</li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_quick_guide.htm">Assembly - Quick Guide</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_useful_resources.htm">Assembly - Useful Resources</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/assembly_programming/assembly_discussion.htm">Assembly - Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="https://www.tutorialspoint.com/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Assembly - Logical Instructions</h1>
<div class="topgooglead">
<hr>
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/show_ads.js"> 
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" width="468" height="60" frameborder="0"></iframe></ins></ins>
</div>
<hr>
<div class="pre-btn">
<a href="https://www.tutorialspoint.com/assembly_programming/assembly_arithmetic_instructions.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="https://www.tutorialspoint.com/assembly_programming/assembly_conditions.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr>
<p>The processor instruction set provides the instructions AND, OR, XOR,
 TEST, and NOT Boolean logic, which tests, sets, and clears the bits 
according to the need of the program.</p>
<p>The format for these instructions −</p>
<table class="table table-bordered">
<tbody><tr>
<th>SN</th>
<th>Instruction</th>
<th>Format</th>
</tr>
<tr>
<td>1</td>
<td>AND</td>
<td>AND operand1, operand2</td>
</tr>
<tr>
<td>2</td>
<td>OR</td>
<td>OR operand1, operand2</td>
</tr>
<tr>
<td>3</td>
<td>XOR</td>
<td>XOR operand1, operand2</td>
</tr>
<tr>
<td>4</td>
<td>TEST</td>
<td>TEST operand1, operand2</td>
</tr>
<tr>
<td>5</td>
<td>NOT</td>
<td>NOT operand1</td>
</tr>
</tbody></table>
<p>The first operand in all the cases could be either in register or in 
memory. The second operand could be either in register/memory or an 
immediate (constant) value. However, memory-to-memory operations are not
 possible. These instructions compare or match bits of the operands and 
set the CF, OF, PF, SF and ZF flags.</p>
<h2>The AND Instruction</h2>
<p>The AND instruction is used for supporting logical expressions by 
performing bitwise AND operation. The bitwise AND operation returns 1, 
if the matching bits from both the operands are 1, otherwise it returns 
0. For example −</p>
<pre class="result notranslate">             Operand1: 	0101
             Operand2: 	0011
----------------------------
After AND -&gt; Operand1:	0001
</pre>
<p>The AND operation can be used for clearing one or more bits. For 
example, say the BL register contains 0011 1010. If you need to clear 
the high-order bits to zero, you AND it with 0FH.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">AND	BL</span><span class="pun">,</span><span class="pln">   </span><span class="lit">0FH</span><span class="pln">   </span><span class="pun">;</span><span class="pln"> </span><span class="typ">This</span><span class="pln"> sets BL to </span><span class="lit">0000</span><span class="pln"> </span><span class="lit">1010</span></pre>
<p>Let's take up another example. If you want to check whether a given 
number is odd or even, a simple test would be to check the least 
significant bit of the number. If this is 1, the number is odd, else the
 number is even.</p>
<p>Assuming the number is in AL register, we can write −</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">AND	AL</span><span class="pun">,</span><span class="pln"> </span><span class="lit">01H</span><span class="pln">     </span><span class="pun">;</span><span class="pln"> </span><span class="typ">ANDing</span><span class="pln"> </span><span class="kwd">with</span><span class="pln"> </span><span class="lit">0000</span><span class="pln"> </span><span class="lit">0001</span><span class="pln">
JZ    EVEN_NUMBER</span></pre>
<p>The following program illustrates this −</p>
<h3>Example</h3>
<pre class="prettyprint notranslate tryit prettyprinted" style=""><span class="pln">section </span><span class="pun">.</span><span class="pln">text
   </span><span class="kwd">global</span><span class="pln"> _start            </span><span class="pun">;</span><span class="pln">must be declared </span><span class="kwd">for</span><span class="pln"> </span><span class="kwd">using</span><span class="pln"> gcc
	
_start</span><span class="pun">:</span><span class="pln">                     </span><span class="pun">;</span><span class="pln">tell linker entry point
   mov   ax</span><span class="pun">,</span><span class="pln">   </span><span class="lit">8h</span><span class="pln">           </span><span class="pun">;</span><span class="pln">getting </span><span class="lit">8</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> the ax 
   </span><span class="kwd">and</span><span class="pln">   ax</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln">              </span><span class="pun">;</span><span class="kwd">and</span><span class="pln"> ax </span><span class="kwd">with</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
   jz    evnn
   mov   eax</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pln">             </span><span class="pun">;</span><span class="pln">system call number </span><span class="pun">(</span><span class="pln">sys_write</span><span class="pun">)</span><span class="pln">
   mov   ebx</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln">             </span><span class="pun">;</span><span class="pln">file descriptor </span><span class="pun">(</span><span class="pln">stdout</span><span class="pun">)</span><span class="pln">
   mov   ecx</span><span class="pun">,</span><span class="pln"> odd_msg       </span><span class="pun">;</span><span class="pln">message to write
   mov   edx</span><span class="pun">,</span><span class="pln"> len2          </span><span class="pun">;</span><span class="pln">length of message
   </span><span class="kwd">int</span><span class="pln">   </span><span class="lit">0x80</span><span class="pln">               </span><span class="pun">;</span><span class="pln">call kernel
   jmp   outprog

evnn</span><span class="pun">:</span><span class="pln">   
  
   mov   ah</span><span class="pun">,</span><span class="pln">  </span><span class="lit">09h</span><span class="pln">
   mov   eax</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pln">             </span><span class="pun">;</span><span class="pln">system call number </span><span class="pun">(</span><span class="pln">sys_write</span><span class="pun">)</span><span class="pln">
   mov   ebx</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln">             </span><span class="pun">;</span><span class="pln">file descriptor </span><span class="pun">(</span><span class="pln">stdout</span><span class="pun">)</span><span class="pln">
   mov   ecx</span><span class="pun">,</span><span class="pln"> even_msg      </span><span class="pun">;</span><span class="pln">message to write
   mov   edx</span><span class="pun">,</span><span class="pln"> len1          </span><span class="pun">;</span><span class="pln">length of message
   </span><span class="kwd">int</span><span class="pln">   </span><span class="lit">0x80</span><span class="pln">               </span><span class="pun">;</span><span class="pln">call kernel

outprog</span><span class="pun">:</span><span class="pln">

   mov   eax</span><span class="pun">,</span><span class="lit">1</span><span class="pln">              </span><span class="pun">;</span><span class="pln">system call number </span><span class="pun">(</span><span class="pln">sys_exit</span><span class="pun">)</span><span class="pln">
   </span><span class="kwd">int</span><span class="pln">   </span><span class="lit">0x80</span><span class="pln">               </span><span class="pun">;</span><span class="pln">call kernel

section   </span><span class="pun">.</span><span class="pln">data
even_msg  db  </span><span class="str">'Even Number!'</span><span class="pln"> </span><span class="pun">;</span><span class="pln">message showing even number
len1  equ  $ </span><span class="pun">-</span><span class="pln"> even_msg 
   
odd_msg db  </span><span class="str">'Odd Number!'</span><span class="pln">    </span><span class="pun">;</span><span class="pln">message showing odd number
len2  equ  $ </span><span class="pun">-</span><span class="pln"> odd_msg</span></pre>
<p>When the above code is compiled and executed, it produces the following result −</p>
<pre class="result notranslate">Even Number!
</pre>
<p>Change the value in the ax register with an odd digit, like −</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">mov  ax</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9h</span><span class="pln">                  </span><span class="pun">;</span><span class="pln"> getting </span><span class="lit">9</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> the ax</span></pre>
<p>The program would display:</p>
<pre class="result notranslate">Odd Number!
</pre>
<p>Similarly to clear the entire register you can AND it with 00H. </p>
<h2>The OR Instruction</h2>
<p>The OR instruction is used for supporting logical expression by 
performing bitwise OR operation. The bitwise OR operator returns 1, if 
the matching bits from either or both operands are one. It returns 0, if
 both the bits are zero.</p>
<p>For example,</p>
<pre class="result notranslate">             Operand1:     0101
             Operand2:     0011
----------------------------
After OR -&gt; Operand1:    0111
</pre>
<p>The OR operation can be used for setting one or more bits. For 
example, let us assume the AL register contains 0011  1010, you need to 
set the four low-order bits, you can OR it with a value 0000  1111, 
i.e., FH.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">OR BL</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0FH</span><span class="pln">                   </span><span class="pun">;</span><span class="pln"> </span><span class="typ">This</span><span class="pln"> sets BL to  </span><span class="lit">0011</span><span class="pln"> </span><span class="lit">1111</span></pre>
<h3>Example</h3>
<p>The following example demonstrates the OR instruction. Let us store 
the value 5 and 3 in the AL and the BL registers, respectively, then the
 instruction,</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">OR AL</span><span class="pun">,</span><span class="pln"> BL</span></pre>
<p>should store 7 in the AL register −</p>
<pre class="prettyprint notranslate tryit prettyprinted" style=""><span class="pln">section </span><span class="pun">.</span><span class="pln">text
   </span><span class="kwd">global</span><span class="pln"> _start            </span><span class="pun">;</span><span class="pln">must be declared </span><span class="kwd">for</span><span class="pln"> </span><span class="kwd">using</span><span class="pln"> gcc
	
_start</span><span class="pun">:</span><span class="pln">                     </span><span class="pun">;</span><span class="pln">tell linker entry point
   mov    al</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pln">             </span><span class="pun">;</span><span class="pln">getting </span><span class="lit">5</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> the al
   mov    bl</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pln">             </span><span class="pun">;</span><span class="pln">getting </span><span class="lit">3</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> the bl
   </span><span class="kwd">or</span><span class="pln">     al</span><span class="pun">,</span><span class="pln"> bl            </span><span class="pun">;</span><span class="kwd">or</span><span class="pln"> al </span><span class="kwd">and</span><span class="pln"> bl registers</span><span class="pun">,</span><span class="pln"> result should be </span><span class="lit">7</span><span class="pln">
   add    al</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">byte</span><span class="pln"> </span><span class="str">'0'</span><span class="pln">      </span><span class="pun">;</span><span class="pln">converting </span><span class="kwd">decimal</span><span class="pln"> to ascii
	
   mov    </span><span class="pun">[</span><span class="pln">result</span><span class="pun">],</span><span class="pln">  al
   mov    eax</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pln">
   mov    ebx</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln">
   mov    ecx</span><span class="pun">,</span><span class="pln"> result
   mov    edx</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> 
   </span><span class="kwd">int</span><span class="pln">    </span><span class="lit">0x80</span><span class="pln">
    
outprog</span><span class="pun">:</span><span class="pln">
   mov    eax</span><span class="pun">,</span><span class="lit">1</span><span class="pln">             </span><span class="pun">;</span><span class="pln">system call number </span><span class="pun">(</span><span class="pln">sys_exit</span><span class="pun">)</span><span class="pln">
   </span><span class="kwd">int</span><span class="pln">    </span><span class="lit">0x80</span><span class="pln">              </span><span class="pun">;</span><span class="pln">call kernel
	
section    </span><span class="pun">.</span><span class="pln">bss
result resb </span><span class="lit">1</span></pre>
<p>When the above code is compiled and executed, it produces the following result −</p>
<pre class="result notranslate">7
</pre>
<h2>The XOR Instruction</h2>
<p>The XOR instruction implements the bitwise XOR operation. The XOR 
operation sets the resultant bit to 1, if and only if the bits from the 
operands are different. If the bits from the operands are same (both 0 
or both 1), the resultant bit is cleared to 0.</p>
<p>For example,</p>
<pre class="result notranslate">             Operand1:     0101
             Operand2:     0011
----------------------------
After XOR -&gt; Operand1:    0110
</pre>
<blockquote>XORing an operand with itself changes the operand to 0. This is used to clear a register.</blockquote>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">XOR     EAX</span><span class="pun">,</span><span class="pln"> EAX</span></pre>
<h2>The TEST Instruction</h2>
<p>The TEST instruction works same as the AND operation, but unlike AND 
instruction, it does not change the first operand. So, if we need to 
check whether a number in a register is even or odd, we can also do this
 using the TEST instruction without changing the original number.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">TEST    AL</span><span class="pun">,</span><span class="pln"> </span><span class="lit">01H</span><span class="pln">
JZ      EVEN_NUMBER</span></pre>
<h2>The NOT Instruction</h2>
<p>The NOT instruction implements the bitwise NOT operation. NOT 
operation reverses the bits in an operand. The operand could be either 
in a register or in the memory.</p>
<p>For example,</p>
<pre class="result notranslate">             Operand1:    0101 0011
After NOT -&gt; Operand1:    1010 1100
</pre>
<hr>
<div class="pre-btn">
<a href="https://www.tutorialspoint.com/assembly_programming/assembly_arithmetic_instructions.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="https://www.tutorialspoint.com/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="pdf-btn">
<a href="https://www.tutorialspoint.com/assembly_programming/pdf/assembly_logical_instructions.pdf" title="Assembly Logical Instructions" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a>
</div>
<div class="nxt-btn">
<a href="https://www.tutorialspoint.com/assembly_programming/assembly_conditions.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/show_ads.js">
</script><ins id="aswift_1_expand" style="display:inline-table;border:none;height:400px;margin:0;padding:0;position:relative;visibility:visible;width:580px;background-color:transparent"><ins id="aswift_1_anchor" style="display:block;border:none;height:400px;margin:0;padding:0;position:relative;visibility:visible;width:580px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;" width="580" height="400" frameborder="0"></iframe></ins></ins>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'http://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Assembly%20Logical%20Instructions_files/facebookIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'http://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Assembly%20Logical%20Instructions_files/twitterIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'http://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Assembly%20Logical%20Instructions_files/linkedinIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=http://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Assembly%20Logical%20Instructions_files/googlePlusIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=http://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Assembly%20Logical%20Instructions_files/StumbleUponIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=http://www.tutorialspoint.com/assembly_programming/assembly_logical_instructions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="Assembly%20Logical%20Instructions_files/reddit.jpg" alt="img">
</a>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/show_ads.js">
</script><ins id="aswift_2_expand" style="display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent"><ins id="aswift_2_anchor" style="display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;" width="300" height="250" frameborder="0"></iframe></ins></ins>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/show_ads.js">
</script><ins id="aswift_3_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent"><ins id="aswift_3_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;" width="300" height="600" frameborder="0"></iframe></ins></ins>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/show_ads.js">
</script><ins id="aswift_4_expand" style="display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent"><ins id="aswift_4_anchor" style="display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_4" name="aswift_4" style="left:0;position:absolute;top:0;" width="300" height="250" frameborder="0"></iframe></ins></ins>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="https://www.tutorialspoint.com/index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="Assembly%20Logical%20Instructions_files/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="https://www.tutorialspoint.com/about/tutorials_writing.htm">Write for us</a></li>
         <li><a href="https://www.tutorialspoint.com/about/faq.htm">FAQ's</a></li>
         <li><a href="https://www.tutorialspoint.com/about/about_helping.htm">Helping</a></li>
         <li><a href="https://www.tutorialspoint.com/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>© Copyright 2016. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}" type="text">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div>
<!-- Libs -->
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/custom-min.js"></script><a class="scroll-to-top" href="#" id="scrollToTop"><i class="icon icon-chevron-up icon-white"></i></a>
<script src="Assembly%20Logical%20Instructions_files/urchin.js">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
<script type="text/javascript" src="Assembly%20Logical%20Instructions_files/jquery.js"></script>
<script type="text/javascript">
   var tryit = new $.TryIt('assembly_programming/try_asm.php');
   tryit.compile();
</script><div id="source" style="display:none;"></div><div id="supportsource" style="display:none;"></div><div id="utilsource" style="display:none;"></div><div id="extrasource" style="display:none;"></div><div id="inputs" style="display:none;"></div><div id="filename" style="display:none;"></div>


<div class="autocomplete-suggestions "></div><div id="cboxOverlay" style="display: none;"></div><div id="colorbox" class="" role="dialog" tabindex="-1" style="display: none;"><div id="cboxWrapper"><div><div id="cboxTopLeft" style="float: left;"></div><div id="cboxTopCenter" style="float: left;"></div><div id="cboxTopRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxMiddleLeft" style="float: left;"></div><div id="cboxContent" style="float: left;"><div id="cboxTitle" style="float: left;"></div><div id="cboxCurrent" style="float: left;"></div><button type="button" id="cboxPrevious"></button><button type="button" id="cboxNext"></button><button id="cboxSlideshow"></button><div id="cboxLoadingOverlay" style="float: left;"></div><div id="cboxLoadingGraphic" style="float: left;"></div></div><div id="cboxMiddleRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxBottomLeft" style="float: left;"></div><div id="cboxBottomCenter" style="float: left;"></div><div id="cboxBottomRight" style="float: left;"></div></div></div><div style="position: absolute; width: 9999px; visibility: hidden; display: none; max-width: none;"></div></div></body></html>